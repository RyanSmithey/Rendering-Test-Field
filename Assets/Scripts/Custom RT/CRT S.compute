// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

float4x4 CameraToWorld;
float4x4 CameraInverseProjection;
Texture2D<float4> SkyboxTexture;
SamplerState sampler_SkyboxTexture;
static const float PI = 3.14159265f;

float2 PixelOffeset;
float2 Pixel;

float Seed;

struct Ray
{
    float3 origin;
    float3 direction;
    float3 energy;
};
Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.energy = 1.0f;
    return ray;
}

struct RayHit
{
    float3 position;
    float distance;
    float3 normal;
    float3 albedo;
};
RayHit CreateRayHit()
{
    RayHit hit;
    hit.position = float3(0.0f, 0.0f, 0.0f);
    hit.distance = 1.#INF;
    hit.normal = float3(0.0f, 0.0f, 0.0f);
    hit.albedo = float3(0.0f, 0.0f, 0.0f);
    
    return hit;
}

struct Cube
{
    float3 min;
    float3 max;
    float3 albedo;
};
struct Sphere
{
    float3 position;
    float radius;
    float3 albedo;
};

StructuredBuffer<Cube> Cubes;
StructuredBuffer<Sphere> Spheres;

float rand()
{
    float result = frac(sin(Seed / 100.0f * dot(Pixel, float2(12.9898f, 78.233f))) * 43758.5453f);
    Seed += 1.0f;
    return result;
}
float sdot(float3 x, float3 y, float f = 1.0f)
{
    return saturate(dot(x, y) * f);
}
Ray CreateCameraRay(float2 uv)
{
     // Transform the camera origin to world space
    float3 origin = mul(CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    
    // Invert the perspective projection of the view-space position
    float3 direction = mul(CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    // Transform the direction from camera to world space and normalize
    direction = mul(CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);
    return CreateRay(origin, direction);
}

void IntersectGroundPlane(Ray ray, inout RayHit bestHit)
{
    // Calculate distance along the ray where the ground plane is intersected
    float t = -ray.origin.y / ray.direction.y;
    
    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.normal = float3(0.0f, 1.0f, 0.0f);
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.albedo = float3(0.8f, 0.8f, 0.8f);
    }
}
void IntersectSphere(Ray ray, Sphere sphere, inout RayHit bestHit)
{
    // Calculate distance along the ray where the sphere is intersected
    float3 d = ray.origin - sphere.position;
    float p1 = -dot(ray.direction, d);
    float p2sqr = p1 * p1 - dot(d, d) + sphere.radius * sphere.radius;
    if (p2sqr < 0)
        return;
    float p2 = sqrt(p2sqr);
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = normalize(bestHit.position - sphere.position);
        bestHit.albedo = sphere.albedo;
    }
}
void IntersectCube(Ray ray, Cube cube, inout RayHit bestHit)
{
    int index = 0;
    float Normal[] = { 0, 0, 0 };
    
    float t1 = (cube.min[0] - ray.origin[0]) * (1 / ray.direction[0]);
    float t2 = (cube.max[0] - ray.origin[0]) * (1 / ray.direction[0]);
    float tmin = min(t1, t2);
    float tmax = max(t1, t2);

    float tminprev;
    bool changed;
    
    for (int i = 1; i < 3; ++i)
    {
        tminprev = tmin;
        
        t1 = (cube.min[i] - ray.origin[i]) * (1 / ray.direction[i]); //I dimension minimum Intersection
        t2 = (cube.max[i] - ray.origin[i]) * (1 / ray.direction[i]); //I dimension maximum Intersection
        tmin = max(tmin, min(t1, t2));
        tmax = min(tmax, max(t1, t2));
        
        changed = (0 != round(tmin - tminprev));
        index = !changed * index + changed * i;
    }

    bool hit = tmax > max(tmin, 0.0);
    float dist = min(abs(tmax), abs(tmin));
    
    if (hit && dist < bestHit.distance)
    {
        Normal[index] = -sign(ray.direction[index]);
        
        bestHit.distance = dist;
        bestHit.position = ray.origin + tmin * ray.direction;
        bestHit.normal = float3(Normal[0], Normal[1], Normal[2]);
        bestHit.albedo = cube.albedo;
    }
}

RayHit Trace(Ray ray)
{
    RayHit bestHit = CreateRayHit();
    IntersectGroundPlane(ray, bestHit);
    
    uint numCubes, Cstride;
    Cubes.GetDimensions(numCubes, Cstride);
    
    uint numSpheres, stride;
    Spheres.GetDimensions(numSpheres, stride);
    
    for (uint j = 0; j < numCubes; j++)
    {
        IntersectCube(ray, Cubes[j], bestHit);
    }
    
    for (uint i = 0; i < numSpheres; i++)
    {
        IntersectSphere(ray, Spheres[i], bestHit);
    }
    
    return bestHit;
}

float3x3 GetTangentSpace(float3 normal)
{
    // Choose a helper vector for the cross product
    float3 helper = float3(1, 0, 0);
    if (abs(normal.x) > 0.99f)
        helper = float3(0, 0, 1);
    // Generate vectors
    float3 tangent = normalize(cross(normal, helper));
    float3 binormal = normalize(cross(normal, tangent));
    return float3x3(tangent, binormal, normal);
}

float3 SampleHemisphere(float3 normal, float alpha)
{
    // Sample the hemisphere, where alpha determines the strength of phong sampling
    float cosTheta = pow(rand(), 1.0f / (alpha + 1.0f));
    float sinTheta = sqrt(1.0f - cosTheta * cosTheta);
    float phi = 2 * PI * rand();
    float3 tangentSpaceDir = float3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);
    // Transform direction to world space
    return mul(tangentSpaceDir, GetTangentSpace(normal));
}

float3 Shade(inout Ray ray, RayHit hit)
{
    if (hit.distance < 1.#INF)
    {
        ray.energy *= hit.albedo;
        ray.origin = hit.position + hit.normal * 0.001f;
        ray.direction = SampleHemisphere(hit.normal, 1.0f);
        return 0.0;
    }
    else
    {
        // Erase the ray's energy - the sky doesn't reflect anything
        ray.energy = 0.0f;
        // Sample the skybox and write it
        float theta = acos(ray.direction.y) / -PI;
        float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
        return SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz;
    }
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    //Crate initial rays later substituted by G-buffer
    Pixel = id.xy;
    
    // Get the dimensions of the RenderTexture
    uint width, height;
    Result.GetDimensions(width, height);
    // Transform pixel to [-1,1] range
    
    float2 uv = float2((id.xy) / float2(width, height) * 2.0f - 1.0f);
    // Get a ray for the UVs
    Ray ray = CreateCameraRay(uv);
    
    float3 result = float3(0, 0, 0);
    
    for (int i = 0; i < 8; i++)
    {
        RayHit hit = Trace(ray);
        result += ray.energy * Shade(ray, hit);
        if (!any(ray.energy))
            break;
    }
    
    Result[id.xy] = lerp(Result[id.xy], float4(result, 1), 0.0001f); //float4(result, 1); //

}
